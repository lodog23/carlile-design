// main: ../style.scss
/******************************************************************
Author: Quantum Dynamix

Stylesheet: Mixins Stylesheet

This is where you can take advantage of Sass' great features: Mixins.
I won't go in-depth on how they work exactly,
there are a few articles below that will help do that. What I will
tell you is that this will help speed up simple changes like
changing a color or adding CSS3 techniques gradients.

A WORD OF WARNING: It's very easy to overdo it here. Be careful and
remember less is more.

Helpful:
http://sachagreif.com/useful-sass-mixins/
http://thesassway.com/intermediate/leveraging-sass-mixins-for-cleaner-code
http://web-design-weekly.com/blog/2013/05/12/handy-sass-mixins/

******************************************************************/


/*********************
TRANSITION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@mixin transition($transition...) {
  // defining prefixes so we can use them in mixins below
  $prefixes:      ("-webkit-", "-moz-", "" );
  @each $prefix in $prefixes {
    #{$prefix}transition: $transition;
  }
}

@mixin transition-duration($transition...) {
  // defining prefixes so we can use them in mixins below
  $prefixes:      ("-webkit-", "-moz-", "" );
  @each $prefix in $prefixes {
    #{$prefix}transition-duration: $transition;
  }
}

@mixin transitionWithPrefixes($transition...) {
  // defining prefixes so we can use them in mixins below
  $prefixes:      ("-webkit-", "-moz-", "" );
  @each $prefix in $prefixes {
    #{$prefix}transition: #{$prefix}$transition;
  }
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdo it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8, $direction: vertical) {
	background-color: $to;
	@if $direction == "vertical"{
		background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
		background-image: -webkit-linear-gradient(top, $from, $to);
		background-image: -moz-linear-gradient(top, $from, $to);
		background-image: -o-linear-gradient(top, $from, $to);
		background-image: linear-gradient(to bottom, $from, $to);
	}@else{
		background-image: -webkit-gradient(linear, left top, right top, from($from), to($to));
		background-image: -webkit-linear-gradient(left, $from, $to);
		background-image: -moz-linear-gradient(right, $from, $to);
		background-image: -o-linear-gradient(right, $from, $to);
		background-image: linear-gradient(to right, $from, $to);
	}
}

/*********************
BOX SIZING
*********************/

/* @include box-sizing(border-box); */
/* NOTE: value of "padding-box" is only supported in Gecko. So
probably best not to use it. I mean, were you going to anyway? */
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
	-moz-box-sizing:    $type;
	-ms-box-sizing:     $type;
	box-sizing:         $type;
}

/*********************
BOX SHADOW
*********************/
/* @include box-shadow(border-box); */
@mixin box-shadow($box-shadow...) {
  // defining prefixes so we can use them in mixins below
  $prefixes:      ("-webkit-", "-moz-", "" );
  @each $prefix in $prefixes {
    #{$prefix}box-shadow: $box-shadow;
  }
}

/*********************
TRANSFORM
*********************/
/* @include transform(transform); */
@mixin transform($transform...) {
  // defining prefixes so we can use them in mixins below
  $prefixes:      ("-webkit-", "-moz-", "" );
  @each $prefix in $prefixes {
    #{$prefix}transform: $transform;
  }
}

/*********************
COLUMNS
*********************/
/* @include columns(columns); */
@mixin columns($column-width: 100px, $column-count: 3, $column-gap: 50px, $column-rule: none ) {
  // defining prefixes so we can use them in mixins below
  $prefixes:      ("-webkit-", "-moz-", "" );
  @each $prefix in $prefixes {
    #{$prefix}column-count: $column-count;
		#{$prefix}column-width: $column-width;
		#{$prefix}column-gap: $column-gap;
		#{$prefix}column-rule: $column-count;
  }
}

/*********************
HYPHENATION
*********************/
/* @include hyphens(hyphens); */
@mixin hyphens($hyphens...) {
  // defining prefixes so we can use them in mixins below
  $prefixes:      ("-webkit-", "-moz-", "-ms-", "" );
  @each $prefix in $prefixes {
    #{$prefix}hyphens: $hyphens;
  }
}

// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  -webkit-box-flex: $values;
     -moz-box-flex: $values;
      -webkit-flex: $values;
  	  -ms-flex: $values;
  	      flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
     -moz-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
     -moz-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
     -moz-flex-flow: $flow;
      -ms-flex-flow: $flow;
          flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  -webkit-box-ordinal-group: $val;
     -moz-box-ordinal-group: $val;
  	     -ms-flex-order: $val;
  	      -webkit-order: $val;
  		      order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
     -moz-flex-grow: $grow;
      -ms-flex-grow: $grow;
          flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
     -moz-flex-shrink: $shrink;
      -ms-flex-shrink: $shrink;
          flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
     -moz-flex-basis: $width;
      -ms-flex-basis: $width;
          flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
     -moz-justify-content: $justify;
      -ms-justify-content: $justify;
          justify-content: $justify;
            -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
  -webkit-align-content: $align;
     -moz-align-content: $align;
      -ms-align-content: $align;
          align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
  -webkit-align-items: $align;
     -moz-align-items: $align;
      -ms-align-items: $align;
          align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
  -webkit-align-self: $align;
     -moz-align-self: $align;
      -ms-align-self: $align;
          align-self: $align;
}


// Convert pixels to ems
// eg. for a relational value of 12px write em(12) when the parent is 16px
// if the parent is another value say 24px write em(12, 24)

$browser-context: 16;

@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1em;
}

@mixin split($columns, $gap) {
	// Number of columns
	-webkit-column-count: $columns;
	-moz-column-count: $columns;
	-o-column-count: $columns;
	-o-column-count: $columns;
	// Gap size
	-webkit-column-gap: $gap;
	-moz-column-gap: $gap;
	-o-column-gap: $gap;
	column-gap: $gap;
}
